{
	"info": {
		"_postman_id": "7fa54a94-69cf-43f1-9e8c-2ff2bac22b66",
		"name": "PublicAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14252758"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get user",
					"item": [
						{
							"name": "Get list of users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check status code\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"pm.test(\"Response JSON values for data should be an array\", function () {\r",
											"    pm.expect(pm.response.json().data).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users?page=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status should be 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete user",
					"item": [
						{
							"name": "DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code 204\", function (){\r",
											"    pm.expect(pm.response.code).to.eql(204)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update user",
					"item": [
						{
							"name": "PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      name: {\r",
											"        type: \"string\"\r",
											"      },\r",
											"      job: {\r",
											"        type: \"string\"\r",
											"      },\r",
											"      updatedAt: {\r",
											"        type: \"string\"\r",
											"      }\r",
											"    },\r",
											"    required: [\"name\", \"job\", \"updatedAt\"],\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"job\": \"{{$randomJobTitle}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/users/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								},
								"description": "\nThis API endpoint allows you to update the details of a user with a specific ID. \n\nTo update a user, send an HTTP PUT request to the following URL: `https://reqres.in/api/users/2`.\n\nThe request should include the following parameters:\n\n- `name` (string, optional): The updated name of the user.\n- `job` (string, optional): The updated job title of the user.\n\nExample request:\n```\nPUT https://reqres.in/api/users/2\nContent-Type: application/json\n\n{\n  \"name\": \"John Doe\",\n  \"job\": \"Software Engineer\"\n}\n```\n\nThe response will have a status code of 200 upon successful update. The response body will contain the updated details of the user:\n\n- `name` (string): The updated name of the user.\n- `job` (string): The updated job title of the user.\n- `updatedAt` (string): The timestamp of when the user details were last updated.\n\nExample response:\n```\nStatus: 200\n{\n  \"name\": \"John Doe\",\n  \"job\": \"Software Engineer\",\n  \"updatedAt\": \"2021-09-20T10:30:00Z\"\n}\n```\n\nPlease note that the `name` and `job` parameters are optional, meaning you can update either one or both of them. If you do not provide a value for a parameter, it will be updated as an empty string.\n\nMake sure to include the `Content-Type` header in your request and set it to `application/json` to indicate that the request body is in JSON format.\n\nRemember to replace `2` in the request URL with the ID of the user you want to update.\n\n"
							},
							"response": []
						},
						{
							"name": "PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for response content type\r",
											"pm.test(\"Response content type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - name and updatedAt\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
											"  pm.expect(responseData.updatedAt).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"updatedAt is in a valid date format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response content type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/users/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								},
								"description": "\nThis API endpoint allows you to update the details of a user with a specific ID. \n\nTo update a user, send an HTTP PUT request to the following URL: `https://reqres.in/api/users/2`.\n\nThe request should include the following parameters:\n\n- `name` (string, optional): The updated name of the user.\n- `job` (string, optional): The updated job title of the user.\n\nExample request:\n```\nPUT https://reqres.in/api/users/2\nContent-Type: application/json\n\n{\n  \"name\": \"John Doe\",\n  \"job\": \"Software Engineer\"\n}\n```\n\nThe response will have a status code of 200 upon successful update. The response body will contain the updated details of the user:\n\n- `name` (string): The updated name of the user.\n- `job` (string): The updated job title of the user.\n- `updatedAt` (string): The timestamp of when the user details were last updated.\n\nExample response:\n```\nStatus: 200\n{\n  \"name\": \"John Doe\",\n  \"job\": \"Software Engineer\",\n  \"updatedAt\": \"2021-09-20T10:30:00Z\"\n}\n```\n\nPlease note that the `name` and `job` parameters are optional, meaning you can update either one or both of them. If you do not provide a value for a parameter, it will be updated as an empty string.\n\nMake sure to include the `Content-Type` header in your request and set it to `application/json` to indicate that the request body is in JSON format.\n\nRemember to replace `2` in the request URL with the ID of the user you want to update.\n\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "Register user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
											"  pm.expect(responseData.password).to.exist.and.to.be.a('string');\r",
											"  pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
											"  pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Email is in a valid format\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.email).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email is not in a valid format\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Password is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/register/qa",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"register",
										"qa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user/Unsuccessful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/register/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"register",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LogIn user",
					"item": [
						{
							"name": "LogIN user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"  pm.test(\"Response has the required field - token\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.token).to.exist.and.to.be.a('string');\r",
											"  });\r",
											"\r",
											"\r",
											"pm.test(\"Token is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Token is in the correct format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.token).to.match(/^[a-zA-Z0-9]+$/, \"Token should contain only alphanumeric characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/login/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://reqres.in",
			"type": "string"
		},
		{
			"key": "email",
			"value": "vvv@vv.in",
			"type": "string"
		},
		{
			"key": "password",
			"value": "142536",
			"type": "string"
		}
	]
}